from openai import OpenAI
import random

# Initialize OpenAI client
# Note: Set your OpenAI API key as an environment variable: OPENAI_API_KEY
import os
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

AGENTS = ["Alice", "Bob", "Charlie", "Daisy", "Eve", "Frank"]

def generate_association(seed, previous_words, leap=False, temp=0.7):
    """
    Generates an associated word or phrase given a seed word using the Chat API, with an adjustable temperature.
    """
    if leap:
        prompt = f"Given the word '{seed}', what's an indirectly related word, phrase, or unique concept? This should require a significant conceptual leap to connect the word to the most recently generated word, phrase, or unique concept. Some examples of sequences including conceptual leaps might be 'Apple' -> 'Pie' -> 'The American Dream' -> 'The American Nightmare' -> 'Lincoln delivering the Gettysburg Address and realizing he's not wearing pants.' That is an example of a sequence, but you should only generate one word, phrase, or unique concept."
    else:
        prompt = f"Given the word '{seed}', what's a directly related word or phrase? This should be a word or phrase that is just a few degrees of difference away from the most recently generated word or phrase. Some examples of sequences of directly related words or phrases might be 'Apple' -> 'Pie' -> 'Windowsill' -> 'Picket fence.' That is an example of a sequence, but you should only generate one word, phrase, or unique concept."
    
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ],
        temperature=temp  # Use the passed temperature value
    )
    
    word = response.choices[0].message.content.strip()

    while word in previous_words:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=temp  # Use the passed temperature value again for retries
        )
        word = response.choices[0].message.content.strip()

    return word

def pattern_game(seed_word, loops=3):
    """
    Simulates the pattern game with multiple agents, where each agent responds
    to the most recent word or phrase generated by another agent.
    """
    words = [seed_word]
    print(f"\nPattern Game Word Associations:")

    for _ in range(loops):
        leaps_occurred = 0  # Track the number of leaps that occurred

        # Let each agent take a turn
        for i, agent in enumerate(AGENTS):
            # Decide on taking a leap or not
            take_leap = random.choice([True, False])

            # Ensure at least one leap occurs per loop, allow up to 2 leaps
            if leaps_occurred == 0:  # No leaps have occurred yet, force a leap
                take_leap = True

            # Calculate temperature adjustment for leaps
            temperature = 0.7
            if take_leap and leaps_occurred < 2:  # Adjust temperature for leaps
                temperature += temperature   # Increase temperature by 100%
                if i == 0:  # If this is the first agent in the loop
                    associated_word = generate_association(seed_word, words, leap=False, temp=temperature)
                else:
                    associated_word = generate_association(words[-1], words, leap=True, temp=temperature)
                leaps_occurred += 1  # Increment leap counter
            else:
                associated_word = generate_association(words[-1], words, temp=temperature)
            
            words.append(associated_word)
            print(f"{agent}: '{associated_word}'\n", end=" -> \n")

        # Try to circle back to the seed word
        words.append(seed_word)
        print(f"All Agents: '{seed_word}'")

    print("\nPattern game concluded.")

# Let's test the function
seed = input("Enter a seed word for the pattern game: ")
pattern_game(seed)